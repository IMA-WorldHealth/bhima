/* global expect, chai, agent */
const expect = require('chai').expect;
const _ = require('lodash');

describe('Account Statement Report', () => {

  const reportURL = '/reports/finance/account_report';

  const primaryCashboxStatement = {
    account_id : 190,
    dateFrom : '2015-01-01',
    dateTo : '2015-12-31',
    lang : 'en',
    renderer : 'json',
    reportId : 6,
    saveReport : 0
  };

  const regidesoStatement = {
    account_id : 172,
    dateFrom : '2016-01-01',
    dateTo : '2016-12-31',
    lang : 'en',
    renderer : 'json',
    reportId : 6,
    saveReport : 0
  };

  const multipleFiscalStatement = {
    account_id : 243,
    dateFrom : '2015-01-01',
    dateTo : '2016-12-31',
    lang : 'en',
    renderer : 'json',
    reportId : 6,
    saveReport : 0
  };

  const customEndStatement = {
    account_id : 176,
    dateFrom : '2016-03-01',
    dateTo : '2016-05-24',
    lang : 'en',
    renderer : 'json',
    reportId : 6,
    saveReport : 0
  };

  const customStartStatement = {
    account_id : 176,
    dateFrom : '2016-05-24',
    dateTo : '2016-06-30',
    lang : 'en',
    renderer : 'json',
    reportId : 6,
    saveReport : 0
  };

  // independently tested by summing the general ledger
  it('Returns expected aggregate results for the primary cash box in 2015', () => {
    // select SUM(debit_equiv), SUM(credit_equiv), SUM(debit_equiv - credit_equiv) FROM general_ledger WHERE DATE(_date)>= DATE('2015('2-01') AND DATE(trans_date) <= DATE('2015-12-31') AND account_id = 190;
    const totalLedgerBalance = -800.2800;
    const totalLedgerCredit = 840;
    const totalLedgerDebit = 39.72;

    // select credit, debit, debit - credit from period_total where account_id = 190 and period_id = 1;
    const openingBalance = 2000;
    const openingDebit = 2000;
    const openingCredit = 0;

    // select COUNT(uuid) FROM general_ledger WHERE DATE(trans_date) >= DATE('2015-01-01') AND DATE(trans_date) <= DATE('2015-12-31') AND account_id = 190;
    const totalNumberTransactions = 36;

    const finalBalance = openingBalance + totalLedgerBalance;

    return agent.get(reportURL)
      .query(primaryCashboxStatement)
      .then((result) => {
        const report = result.body;

        expect(Number(report.openingBalance.credit)).to.equal(openingCredit);
        expect(Number(report.openingBalance.debit)).to.equal(openingDebit);
        expect(Number(report.openingBalance.balance)).to.equal(openingBalance);

        expect(Number(report.sum.period.balance)).to.equal(totalLedgerBalance);
        expect(Number(report.sum.period.debit)).to.equal(totalLedgerDebit);
        expect(Number(report.sum.period.credit)).to.equal(totalLedgerCredit);

        expect(Number(report.sum.balance)).to.equal(finalBalance);
      });

  });

  // independently tested by looking at cash payments and invoices
  it('Returns expected balance for the REGIDESO account for 2016', () => {
    // select SUM(ROUND(cost, 2)) from invoice join debtor on debtor_uuid = debtor.uuid join debtor_group on debtor.group_uuid = debtor_group.uuid where debtor_group.name LIKE '%REGIDESO%' and DATE(invoice.date) >= DATE('2016-01-01') AND DATE(invoice.date) <= DATE('2016-12-31');
    const totalInvoicesCost = 28.4;

    // select SUM(amount) from cash join debtor on debtor_uuid = debtor.uuid join debtor_group on debtor.group_uuid = debtor_group.uuid where debtor_group.name LIKE '%REGIDESO%' and DATE(cash.date) >= DATE('2016-01-01') AND DATE(cash.date) <= DATE('2016-12-31');
    const totalCashPayments = 3.32;

    return agent.get(reportURL)
      .query(regidesoStatement)
      .then((result) => {
        const report = result.body;

        // debits owed are generated by invoices
        expect(Number(report.sum.period.debit)).to.equal(totalInvoicesCost);

        // credit received comes from cash payments
        expect(Number(report.sum.period.credit)).to.equal(totalCashPayments);

        // not a flagged fiscal year span
        expect(report.warnMultipleFiscalYears).to.be.undefined;
      });
  });

  it('Warns the user for an Income/Expense statement spanning multiple fiscal years', () => {
    return agent.get(reportURL)
      .query(multipleFiscalStatement)
      .then((result) => {
        const report = result.body;
        expect(report.warnMultipleFiscalYears).to.equal(true);
      });
  });

  it('A custom ending balance for Cash Patients is the same as the starting balance for the same custom start date', () => {
    let endReport = {};
    let startReport = {};

    const balanceForCashPatients = 73.1151;

    return agent.get(reportURL)
      .query(customEndStatement)
      .then((result) => {
        endReport = result.body;
        return agent.get(reportURL)
          .query(customStartStatement);
      })
      .then((result) => {
        startReport = result.body;

        expect(Number(endReport.sum.balance)).to.equal(balanceForCashPatients);
        expect(Number(endReport.sum.balance)).to.equal(Number(startReport.openingBalance.balance));
      });
  });
});
